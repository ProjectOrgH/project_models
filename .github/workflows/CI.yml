name: CI Pipeline
on:
  push:
    branches:
      - ajayy_gradio
  workflow_dispatch:

jobs:
  train:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9","3.10", "3.11"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements/requirements.txt ]; then pip install -r requirements/requirements.txt; fi
    - name: Train and save pipeline
      run: python fraud_detection_model/train_pipeline.py
    - uses: actions/upload-artifact@v2
      with:
        name: my-trained-pipeline
        path: fraud_detection_model/trained_models/*.pkl

  test:
    needs: train
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/download-artifact@v2
      with:
        name: my-trained-pipeline
    - run: mv *.pkl fraud_detection_model/trained_models/
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f test_requirements.txt ]; then pip install -r test_requirements.txt; fi
        if [ -f requirements/test_requirements.txt ]; then pip install -r requirements/test_requirements.txt; fi
    - name: Test with pytest
      run: |
        if pytest --collect-only; then
          pytest
        else
          echo "No tests to run."
        fi

  build:
    needs: [train, test]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/download-artifact@v2
      with:
        name: my-trained-pipeline
    - run: mv *.pkl fraud_detection_model/trained_models/
    - name: Install dependencies
      run: |
        pip install --upgrade build
        python -m pip install --upgrade pip
        python -m pip install build setuptools wheel
    - name: Build package
      run: python -m build 
    - uses: actions/upload-artifact@v2
      with:
        name: my-build-package
        path: dist/*.whl

  push-image:
    #if: false  # This job will always be skipped, we will revisit it later
    needs: [train, test, build]
    runs-on: ubuntu-latest
    steps:
    - name: Repo Checkout
      uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: my-build-package
    - run: mv *.whl fraud_detection_model_api/

    #- name: Login to Docker hub
    #  env:
    #    DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
    #    DOCKER_PASSWORD: ${{ secrets.DOCKER_PASS_TOKEN }}
    #  run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 

    #- name: Build the Docker image for Fastapi app
    #  env:
    #    DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
    #  run: docker build . -f Dockerfile -t $DOCKER_USER/sample-fraud_detection_model:latest

    #- name: Push the Docker Image
    #  env:
    #    DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
    #  run: docker push $DOCKER_USER/sample-fraud_detection_model

    #- name: Logout to Docker hub
    #  run: docker logout
    
    - name: Login to Docker hub and push the image to ECR
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASS_TOKEN }}
        AWS_ECR: 130621888287.dkr.ecr.ap-south-1.amazonaws.com
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
          echo $AWS_SECRET_ACCESS_KEY | \
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile ecr-user
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile ecr-user
          aws configure set region ap-south-1 --profile ecr-user
          aws ecr get-login-password --profile ecr-user | docker login --username AWS --password-stdin $AWS_ECR


    - name: Build the Docker image for Fastapi app
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
      run: docker build -t fraud_detection_fastapi .

    - name: Tag the Docker image
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
        AWS_ECR: 130621888287.dkr.ecr.ap-south-1.amazonaws.com
      run: docker tag fraud_detection_fastapi:latest $AWS_ECR/fraud_detection_fastapi:latest

    - name: Push the Docker Image
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
      run: docker push 130621888287.dkr.ecr.ap-south-1.amazonaws.com/fraud_detection_fastapi:latest

    - name: Logout to Docker hub
      run: docker logout
